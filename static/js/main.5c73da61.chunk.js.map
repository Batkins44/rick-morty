{"version":3,"sources":["components/Titles.js","components/Results.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","madeChoice","className","chosenChar","name","src","image","alt","gender","location","species","Results","results","map","item","index","key","onClick","chooseChar","error","Form","onSubmit","getImg","type","placeholder","App","state","undefined","_callee","e","_char","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","char","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","stop","chosen","components_Titles","this","components_Form","components_Results","React","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c73da61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = props => (\r\n    <div>\r\n        {\r\n        props.madeChoice == false && \r\n        <div>\r\n        <h1>Wubba Lubba Dub Dub</h1>\r\n        <h2>Search for a character to choose your protagonist</h2>\r\n        </div>\r\n        }\r\n        {\r\n            props.madeChoice == true &&\r\n            <div>\r\n                <h1>You have chosen <span className=\"char_name\">{props.chosenChar.name}</span></h1><br />\r\n                <img src={props.chosenChar.image} alt=\"chosen char\"></img><br />\r\n                <h4>Gender: <span>{props.chosenChar.gender}</span></h4>\r\n                <h4>Home: <span>{props.chosenChar.location.name}</span></h4>\r\n                <h4>Species: <span>{props.chosenChar.species}</span></h4>\r\n                <button>Begin your journey</button>\r\n            </div>\r\n        }\r\n    </div>\r\n\r\n)\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Results = props => (\r\n    <div>\r\n    {\r\n        props.results && props.results.map((item, index) => {\r\n            return(\r\n                <div key={index}>\r\n                    { \r\n                    <div>\r\n                        Character:\r\n                        { item.name}<br/> \r\n                        <img src={item.image}></img><br />\r\n                        <button onClick={() => { props.chooseChar(item) }}>Choose {item.name}</button>\r\n                        <hr />\r\n                    </div> \r\n                    }\r\n                </div>\r\n            )\r\n\r\n    })\r\n    \r\n    }{ \r\n        props.error && <p>{props.error}</p>\r\n    }\r\n    </div>\r\n\r\n)\r\n\r\nexport default Results;","import React from 'react';\r\n\r\n\r\nconst Form = props => (\r\n    <div>\r\n        {props.madeChoice == false &&\r\n    <form onSubmit={props.getImg}>\r\n    <input type=\"text\" name=\"name\" placeholder=\"Character Name...\"></input>\r\n    <button>Get Character</button>\r\n\r\n    </form>\r\n        }\r\n        {\r\n            props.madeChoice == true &&\r\n            <div></div>\r\n            }\r\n    </div>\r\n);\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Results from './components/Results';\nimport Form from './components/Form';\n\nclass App extends React.Component {\n  state = {\n    results:undefined,\n    error:undefined,\n    chosenChar:undefined,\n    madeChoice:false\n\n  }\n  getImg = async (e) => {\n    e.preventDefault();\n    const char = e.target.elements.name.value;\n    const api_call = await fetch(`https://rickandmortyapi.com/api/character/?name=${char}`);\n    const data = await api_call.json();\n    console.log(data);\n    if(char) {\n      this.setState({\n        results: data.results,\n        chosenChar: undefined,\n        madeChoice:false,\n        error:undefined\n      })\n      console.log(this.state);\n    }else{\n      this.setState({\n        results: undefined,\n        chosenChar: undefined,\n        madeChoice:false,\n        error:\"Please type  name to search\"\n      })\n    }\n  }\n\n  chooseChar = (chosen) => {\n    console.log(\"character chosen\",chosen)\n    this.setState({\n      results:undefined,\n      chosenChar:chosen,\n      madeChoice:true,\n      error:undefined\n    })\n  }\n  render () {\n    return(\n    <div className=\"App\">\n      <Titles \n      madeChoice={this.state.madeChoice}\n      chosenChar={this.state.chosenChar} />\n      <Form \n      getImg={this.getImg}\n      madeChoice={this.state.madeChoice} />\n      <Results \n      // character={this.state.character}\n      // charImg={this.state.charImg}\n      chooseChar={this.chooseChar}\n      results={this.state.results}\n      error={this.state.error}\n      />\n    </div>\n    )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}